//
// AssistantsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AssistantsAPI {

    /**
     Cancels a run that is `in_progress`.
     
     - parameter threadId: (path) The ID of the thread to which this run belongs. 
     - parameter runId: (path) The ID of the run to cancel. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cancelRun(threadId: String, runId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RunObject?, _ error: Error?) -> Void)) -> RequestTask {
        return cancelRunWithRequestBuilder(threadId: threadId, runId: runId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Cancels a run that is `in_progress`.
     - POST /threads/{thread_id}/runs/{run_id}/cancel
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter threadId: (path) The ID of the thread to which this run belongs. 
     - parameter runId: (path) The ID of the run to cancel. 
     - returns: RequestBuilder<RunObject> 
     */
    open class func cancelRunWithRequestBuilder(threadId: String, runId: String) -> RequestBuilder<RunObject> {
        var localVariablePath = "/threads/{thread_id}/runs/{run_id}/cancel"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RunObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create an assistant with a model and instructions.
     
     - parameter createAssistantRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createAssistant(createAssistantRequest: CreateAssistantRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AssistantObject?, _ error: Error?) -> Void)) -> RequestTask {
        return createAssistantWithRequestBuilder(createAssistantRequest: createAssistantRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create an assistant with a model and instructions.
     - POST /assistants
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter createAssistantRequest: (body)  
     - returns: RequestBuilder<AssistantObject> 
     */
    open class func createAssistantWithRequestBuilder(createAssistantRequest: CreateAssistantRequest) -> RequestBuilder<AssistantObject> {
        let localVariablePath = "/assistants"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createAssistantRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssistantObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a message.
     
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) to create a message for. 
     - parameter createMessageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createMessage(threadId: String, createMessageRequest: CreateMessageRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MessageObject?, _ error: Error?) -> Void)) -> RequestTask {
        return createMessageWithRequestBuilder(threadId: threadId, createMessageRequest: createMessageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a message.
     - POST /threads/{thread_id}/messages
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) to create a message for. 
     - parameter createMessageRequest: (body)  
     - returns: RequestBuilder<MessageObject> 
     */
    open class func createMessageWithRequestBuilder(threadId: String, createMessageRequest: CreateMessageRequest) -> RequestBuilder<MessageObject> {
        var localVariablePath = "/threads/{thread_id}/messages"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createMessageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MessageObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter include
     */
    public enum Include_createRun: String, CaseIterable {
        case stepDetailsPeriodToolCallsLeftSquareBracketStarRightSquareBracketPeriodFileSearchPeriodResultsLeftSquareBracketStarRightSquareBracketPeriodContent = "step_details.tool_calls[*].file_search.results[*].content"
    }

    /**
     Create a run.
     
     - parameter threadId: (path) The ID of the thread to run. 
     - parameter createRunRequest: (body)  
     - parameter include: (query) A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createRun(threadId: String, createRunRequest: CreateRunRequest, include: [Include_createRun]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RunObject?, _ error: Error?) -> Void)) -> RequestTask {
        return createRunWithRequestBuilder(threadId: threadId, createRunRequest: createRunRequest, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a run.
     - POST /threads/{thread_id}/runs
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter threadId: (path) The ID of the thread to run. 
     - parameter createRunRequest: (body)  
     - parameter include: (query) A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.  (optional)
     - returns: RequestBuilder<RunObject> 
     */
    open class func createRunWithRequestBuilder(threadId: String, createRunRequest: CreateRunRequest, include: [Include_createRun]? = nil) -> RequestBuilder<RunObject> {
        var localVariablePath = "/threads/{thread_id}/runs"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createRunRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include[]": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RunObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a thread.
     
     - parameter createThreadRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createThread(createThreadRequest: CreateThreadRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ThreadObject?, _ error: Error?) -> Void)) -> RequestTask {
        return createThreadWithRequestBuilder(createThreadRequest: createThreadRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a thread.
     - POST /threads
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter createThreadRequest: (body)  (optional)
     - returns: RequestBuilder<ThreadObject> 
     */
    open class func createThreadWithRequestBuilder(createThreadRequest: CreateThreadRequest? = nil) -> RequestBuilder<ThreadObject> {
        let localVariablePath = "/threads"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createThreadRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ThreadObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a thread and run it in one request.
     
     - parameter createThreadAndRunRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createThreadAndRun(createThreadAndRunRequest: CreateThreadAndRunRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RunObject?, _ error: Error?) -> Void)) -> RequestTask {
        return createThreadAndRunWithRequestBuilder(createThreadAndRunRequest: createThreadAndRunRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a thread and run it in one request.
     - POST /threads/runs
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter createThreadAndRunRequest: (body)  
     - returns: RequestBuilder<RunObject> 
     */
    open class func createThreadAndRunWithRequestBuilder(createThreadAndRunRequest: CreateThreadAndRunRequest) -> RequestBuilder<RunObject> {
        let localVariablePath = "/threads/runs"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createThreadAndRunRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RunObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete an assistant.
     
     - parameter assistantId: (path) The ID of the assistant to delete. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteAssistant(assistantId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DeleteAssistantResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteAssistantWithRequestBuilder(assistantId: assistantId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an assistant.
     - DELETE /assistants/{assistant_id}
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter assistantId: (path) The ID of the assistant to delete. 
     - returns: RequestBuilder<DeleteAssistantResponse> 
     */
    open class func deleteAssistantWithRequestBuilder(assistantId: String) -> RequestBuilder<DeleteAssistantResponse> {
        var localVariablePath = "/assistants/{assistant_id}"
        let assistantIdPreEscape = "\(APIHelper.mapValueToPathItem(assistantId))"
        let assistantIdPostEscape = assistantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{assistant_id}", with: assistantIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeleteAssistantResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deletes a message.
     
     - parameter threadId: (path) The ID of the thread to which this message belongs. 
     - parameter messageId: (path) The ID of the message to delete. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteMessage(threadId: String, messageId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DeleteMessageResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteMessageWithRequestBuilder(threadId: threadId, messageId: messageId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deletes a message.
     - DELETE /threads/{thread_id}/messages/{message_id}
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter threadId: (path) The ID of the thread to which this message belongs. 
     - parameter messageId: (path) The ID of the message to delete. 
     - returns: RequestBuilder<DeleteMessageResponse> 
     */
    open class func deleteMessageWithRequestBuilder(threadId: String, messageId: String) -> RequestBuilder<DeleteMessageResponse> {
        var localVariablePath = "/threads/{thread_id}/messages/{message_id}"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let messageIdPreEscape = "\(APIHelper.mapValueToPathItem(messageId))"
        let messageIdPostEscape = messageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{message_id}", with: messageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeleteMessageResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete a thread.
     
     - parameter threadId: (path) The ID of the thread to delete. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteThread(threadId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DeleteThreadResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteThreadWithRequestBuilder(threadId: threadId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a thread.
     - DELETE /threads/{thread_id}
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter threadId: (path) The ID of the thread to delete. 
     - returns: RequestBuilder<DeleteThreadResponse> 
     */
    open class func deleteThreadWithRequestBuilder(threadId: String) -> RequestBuilder<DeleteThreadResponse> {
        var localVariablePath = "/threads/{thread_id}"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeleteThreadResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieves an assistant.
     
     - parameter assistantId: (path) The ID of the assistant to retrieve. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAssistant(assistantId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AssistantObject?, _ error: Error?) -> Void)) -> RequestTask {
        return getAssistantWithRequestBuilder(assistantId: assistantId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves an assistant.
     - GET /assistants/{assistant_id}
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter assistantId: (path) The ID of the assistant to retrieve. 
     - returns: RequestBuilder<AssistantObject> 
     */
    open class func getAssistantWithRequestBuilder(assistantId: String) -> RequestBuilder<AssistantObject> {
        var localVariablePath = "/assistants/{assistant_id}"
        let assistantIdPreEscape = "\(APIHelper.mapValueToPathItem(assistantId))"
        let assistantIdPostEscape = assistantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{assistant_id}", with: assistantIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssistantObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve a message.
     
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) to which this message belongs. 
     - parameter messageId: (path) The ID of the message to retrieve. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMessage(threadId: String, messageId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MessageObject?, _ error: Error?) -> Void)) -> RequestTask {
        return getMessageWithRequestBuilder(threadId: threadId, messageId: messageId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve a message.
     - GET /threads/{thread_id}/messages/{message_id}
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) to which this message belongs. 
     - parameter messageId: (path) The ID of the message to retrieve. 
     - returns: RequestBuilder<MessageObject> 
     */
    open class func getMessageWithRequestBuilder(threadId: String, messageId: String) -> RequestBuilder<MessageObject> {
        var localVariablePath = "/threads/{thread_id}/messages/{message_id}"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let messageIdPreEscape = "\(APIHelper.mapValueToPathItem(messageId))"
        let messageIdPostEscape = messageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{message_id}", with: messageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MessageObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieves a run.
     
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) that was run. 
     - parameter runId: (path) The ID of the run to retrieve. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getRun(threadId: String, runId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RunObject?, _ error: Error?) -> Void)) -> RequestTask {
        return getRunWithRequestBuilder(threadId: threadId, runId: runId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves a run.
     - GET /threads/{thread_id}/runs/{run_id}
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) that was run. 
     - parameter runId: (path) The ID of the run to retrieve. 
     - returns: RequestBuilder<RunObject> 
     */
    open class func getRunWithRequestBuilder(threadId: String, runId: String) -> RequestBuilder<RunObject> {
        var localVariablePath = "/threads/{thread_id}/runs/{run_id}"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RunObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter include
     */
    public enum Include_getRunStep: String, CaseIterable {
        case stepDetailsPeriodToolCallsLeftSquareBracketStarRightSquareBracketPeriodFileSearchPeriodResultsLeftSquareBracketStarRightSquareBracketPeriodContent = "step_details.tool_calls[*].file_search.results[*].content"
    }

    /**
     Retrieves a run step.
     
     - parameter threadId: (path) The ID of the thread to which the run and run step belongs. 
     - parameter runId: (path) The ID of the run to which the run step belongs. 
     - parameter stepId: (path) The ID of the run step to retrieve. 
     - parameter include: (query) A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getRunStep(threadId: String, runId: String, stepId: String, include: [Include_getRunStep]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RunStepObject?, _ error: Error?) -> Void)) -> RequestTask {
        return getRunStepWithRequestBuilder(threadId: threadId, runId: runId, stepId: stepId, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves a run step.
     - GET /threads/{thread_id}/runs/{run_id}/steps/{step_id}
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter threadId: (path) The ID of the thread to which the run and run step belongs. 
     - parameter runId: (path) The ID of the run to which the run step belongs. 
     - parameter stepId: (path) The ID of the run step to retrieve. 
     - parameter include: (query) A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.  (optional)
     - returns: RequestBuilder<RunStepObject> 
     */
    open class func getRunStepWithRequestBuilder(threadId: String, runId: String, stepId: String, include: [Include_getRunStep]? = nil) -> RequestBuilder<RunStepObject> {
        var localVariablePath = "/threads/{thread_id}/runs/{run_id}/steps/{step_id}"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        let stepIdPreEscape = "\(APIHelper.mapValueToPathItem(stepId))"
        let stepIdPostEscape = stepIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{step_id}", with: stepIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include[]": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RunStepObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieves a thread.
     
     - parameter threadId: (path) The ID of the thread to retrieve. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getThread(threadId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ThreadObject?, _ error: Error?) -> Void)) -> RequestTask {
        return getThreadWithRequestBuilder(threadId: threadId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves a thread.
     - GET /threads/{thread_id}
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter threadId: (path) The ID of the thread to retrieve. 
     - returns: RequestBuilder<ThreadObject> 
     */
    open class func getThreadWithRequestBuilder(threadId: String) -> RequestBuilder<ThreadObject> {
        var localVariablePath = "/threads/{thread_id}"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ThreadObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter order
     */
    public enum Order_listAssistants: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     Returns a list of assistants.
     
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listAssistants(limit: Int? = nil, order: Order_listAssistants? = nil, after: String? = nil, before: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ListAssistantsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return listAssistantsWithRequestBuilder(limit: limit, order: order, after: after, before: before).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Returns a list of assistants.
     - GET /assistants
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - returns: RequestBuilder<ListAssistantsResponse> 
     */
    open class func listAssistantsWithRequestBuilder(limit: Int? = nil, order: Order_listAssistants? = nil, after: String? = nil, before: String? = nil) -> RequestBuilder<ListAssistantsResponse> {
        let localVariablePath = "/assistants"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
            "after": (wrappedValue: after?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListAssistantsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter order
     */
    public enum Order_listMessages: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     Returns a list of messages for a given thread.
     
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) the messages belong to. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - parameter runId: (query) Filter messages by the run ID that generated them.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listMessages(threadId: String, limit: Int? = nil, order: Order_listMessages? = nil, after: String? = nil, before: String? = nil, runId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ListMessagesResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return listMessagesWithRequestBuilder(threadId: threadId, limit: limit, order: order, after: after, before: before, runId: runId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Returns a list of messages for a given thread.
     - GET /threads/{thread_id}/messages
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) the messages belong to. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - parameter runId: (query) Filter messages by the run ID that generated them.  (optional)
     - returns: RequestBuilder<ListMessagesResponse> 
     */
    open class func listMessagesWithRequestBuilder(threadId: String, limit: Int? = nil, order: Order_listMessages? = nil, after: String? = nil, before: String? = nil, runId: String? = nil) -> RequestBuilder<ListMessagesResponse> {
        var localVariablePath = "/threads/{thread_id}/messages"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
            "after": (wrappedValue: after?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
            "run_id": (wrappedValue: runId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListMessagesResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter order
     */
    public enum Order_listRunSteps: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     * enum for parameter include
     */
    public enum Include_listRunSteps: String, CaseIterable {
        case stepDetailsPeriodToolCallsLeftSquareBracketStarRightSquareBracketPeriodFileSearchPeriodResultsLeftSquareBracketStarRightSquareBracketPeriodContent = "step_details.tool_calls[*].file_search.results[*].content"
    }

    /**
     Returns a list of run steps belonging to a run.
     
     - parameter threadId: (path) The ID of the thread the run and run steps belong to. 
     - parameter runId: (path) The ID of the run the run steps belong to. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - parameter include: (query) A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listRunSteps(threadId: String, runId: String, limit: Int? = nil, order: Order_listRunSteps? = nil, after: String? = nil, before: String? = nil, include: [Include_listRunSteps]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ListRunStepsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return listRunStepsWithRequestBuilder(threadId: threadId, runId: runId, limit: limit, order: order, after: after, before: before, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Returns a list of run steps belonging to a run.
     - GET /threads/{thread_id}/runs/{run_id}/steps
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter threadId: (path) The ID of the thread the run and run steps belong to. 
     - parameter runId: (path) The ID of the run the run steps belong to. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - parameter include: (query) A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.  (optional)
     - returns: RequestBuilder<ListRunStepsResponse> 
     */
    open class func listRunStepsWithRequestBuilder(threadId: String, runId: String, limit: Int? = nil, order: Order_listRunSteps? = nil, after: String? = nil, before: String? = nil, include: [Include_listRunSteps]? = nil) -> RequestBuilder<ListRunStepsResponse> {
        var localVariablePath = "/threads/{thread_id}/runs/{run_id}/steps"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
            "after": (wrappedValue: after?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
            "include[]": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListRunStepsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter order
     */
    public enum Order_listRuns: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     Returns a list of runs belonging to a thread.
     
     - parameter threadId: (path) The ID of the thread the run belongs to. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listRuns(threadId: String, limit: Int? = nil, order: Order_listRuns? = nil, after: String? = nil, before: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ListRunsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return listRunsWithRequestBuilder(threadId: threadId, limit: limit, order: order, after: after, before: before).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Returns a list of runs belonging to a thread.
     - GET /threads/{thread_id}/runs
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter threadId: (path) The ID of the thread the run belongs to. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - returns: RequestBuilder<ListRunsResponse> 
     */
    open class func listRunsWithRequestBuilder(threadId: String, limit: Int? = nil, order: Order_listRuns? = nil, after: String? = nil, before: String? = nil) -> RequestBuilder<ListRunsResponse> {
        var localVariablePath = "/threads/{thread_id}/runs"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
            "after": (wrappedValue: after?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListRunsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Modifies an assistant.
     
     - parameter assistantId: (path) The ID of the assistant to modify. 
     - parameter modifyAssistantRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func modifyAssistant(assistantId: String, modifyAssistantRequest: ModifyAssistantRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AssistantObject?, _ error: Error?) -> Void)) -> RequestTask {
        return modifyAssistantWithRequestBuilder(assistantId: assistantId, modifyAssistantRequest: modifyAssistantRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Modifies an assistant.
     - POST /assistants/{assistant_id}
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter assistantId: (path) The ID of the assistant to modify. 
     - parameter modifyAssistantRequest: (body)  
     - returns: RequestBuilder<AssistantObject> 
     */
    open class func modifyAssistantWithRequestBuilder(assistantId: String, modifyAssistantRequest: ModifyAssistantRequest) -> RequestBuilder<AssistantObject> {
        var localVariablePath = "/assistants/{assistant_id}"
        let assistantIdPreEscape = "\(APIHelper.mapValueToPathItem(assistantId))"
        let assistantIdPostEscape = assistantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{assistant_id}", with: assistantIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: modifyAssistantRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssistantObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Modifies a message.
     
     - parameter threadId: (path) The ID of the thread to which this message belongs. 
     - parameter messageId: (path) The ID of the message to modify. 
     - parameter modifyMessageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func modifyMessage(threadId: String, messageId: String, modifyMessageRequest: ModifyMessageRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MessageObject?, _ error: Error?) -> Void)) -> RequestTask {
        return modifyMessageWithRequestBuilder(threadId: threadId, messageId: messageId, modifyMessageRequest: modifyMessageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Modifies a message.
     - POST /threads/{thread_id}/messages/{message_id}
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter threadId: (path) The ID of the thread to which this message belongs. 
     - parameter messageId: (path) The ID of the message to modify. 
     - parameter modifyMessageRequest: (body)  
     - returns: RequestBuilder<MessageObject> 
     */
    open class func modifyMessageWithRequestBuilder(threadId: String, messageId: String, modifyMessageRequest: ModifyMessageRequest) -> RequestBuilder<MessageObject> {
        var localVariablePath = "/threads/{thread_id}/messages/{message_id}"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let messageIdPreEscape = "\(APIHelper.mapValueToPathItem(messageId))"
        let messageIdPostEscape = messageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{message_id}", with: messageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: modifyMessageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MessageObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Modifies a run.
     
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) that was run. 
     - parameter runId: (path) The ID of the run to modify. 
     - parameter modifyRunRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func modifyRun(threadId: String, runId: String, modifyRunRequest: ModifyRunRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RunObject?, _ error: Error?) -> Void)) -> RequestTask {
        return modifyRunWithRequestBuilder(threadId: threadId, runId: runId, modifyRunRequest: modifyRunRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Modifies a run.
     - POST /threads/{thread_id}/runs/{run_id}
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) that was run. 
     - parameter runId: (path) The ID of the run to modify. 
     - parameter modifyRunRequest: (body)  
     - returns: RequestBuilder<RunObject> 
     */
    open class func modifyRunWithRequestBuilder(threadId: String, runId: String, modifyRunRequest: ModifyRunRequest) -> RequestBuilder<RunObject> {
        var localVariablePath = "/threads/{thread_id}/runs/{run_id}"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: modifyRunRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RunObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Modifies a thread.
     
     - parameter threadId: (path) The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified. 
     - parameter modifyThreadRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func modifyThread(threadId: String, modifyThreadRequest: ModifyThreadRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ThreadObject?, _ error: Error?) -> Void)) -> RequestTask {
        return modifyThreadWithRequestBuilder(threadId: threadId, modifyThreadRequest: modifyThreadRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Modifies a thread.
     - POST /threads/{thread_id}
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter threadId: (path) The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified. 
     - parameter modifyThreadRequest: (body)  
     - returns: RequestBuilder<ThreadObject> 
     */
    open class func modifyThreadWithRequestBuilder(threadId: String, modifyThreadRequest: ModifyThreadRequest) -> RequestBuilder<ThreadObject> {
        var localVariablePath = "/threads/{thread_id}"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: modifyThreadRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ThreadObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request. 
     
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) to which this run belongs. 
     - parameter runId: (path) The ID of the run that requires the tool output submission. 
     - parameter submitToolOutputsRunRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func submitToolOuputsToRun(threadId: String, runId: String, submitToolOutputsRunRequest: SubmitToolOutputsRunRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RunObject?, _ error: Error?) -> Void)) -> RequestTask {
        return submitToolOuputsToRunWithRequestBuilder(threadId: threadId, runId: runId, submitToolOutputsRunRequest: submitToolOutputsRunRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request. 
     - POST /threads/{thread_id}/runs/{run_id}/submit_tool_outputs
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) to which this run belongs. 
     - parameter runId: (path) The ID of the run that requires the tool output submission. 
     - parameter submitToolOutputsRunRequest: (body)  
     - returns: RequestBuilder<RunObject> 
     */
    open class func submitToolOuputsToRunWithRequestBuilder(threadId: String, runId: String, submitToolOutputsRunRequest: SubmitToolOutputsRunRequest) -> RequestBuilder<RunObject> {
        var localVariablePath = "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: submitToolOutputsRunRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RunObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
