//
// VectorStoresAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class VectorStoresAPI {

    /**
     Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
     
     - parameter vectorStoreId: (path) The ID of the vector store that the file batch belongs to. 
     - parameter batchId: (path) The ID of the file batch to cancel. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cancelVectorStoreFileBatch(vectorStoreId: String, batchId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VectorStoreFileBatchObject?, _ error: Error?) -> Void)) -> RequestTask {
        return cancelVectorStoreFileBatchWithRequestBuilder(vectorStoreId: vectorStoreId, batchId: batchId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
     - POST /vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter vectorStoreId: (path) The ID of the vector store that the file batch belongs to. 
     - parameter batchId: (path) The ID of the file batch to cancel. 
     - returns: RequestBuilder<VectorStoreFileBatchObject> 
     */
    open class func cancelVectorStoreFileBatchWithRequestBuilder(vectorStoreId: String, batchId: String) -> RequestBuilder<VectorStoreFileBatchObject> {
        var localVariablePath = "/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel"
        let vectorStoreIdPreEscape = "\(APIHelper.mapValueToPathItem(vectorStoreId))"
        let vectorStoreIdPostEscape = vectorStoreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vector_store_id}", with: vectorStoreIdPostEscape, options: .literal, range: nil)
        let batchIdPreEscape = "\(APIHelper.mapValueToPathItem(batchId))"
        let batchIdPostEscape = batchIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{batch_id}", with: batchIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VectorStoreFileBatchObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a vector store.
     
     - parameter createVectorStoreRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createVectorStore(createVectorStoreRequest: CreateVectorStoreRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VectorStoreObject?, _ error: Error?) -> Void)) -> RequestTask {
        return createVectorStoreWithRequestBuilder(createVectorStoreRequest: createVectorStoreRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a vector store.
     - POST /vector_stores
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter createVectorStoreRequest: (body)  
     - returns: RequestBuilder<VectorStoreObject> 
     */
    open class func createVectorStoreWithRequestBuilder(createVectorStoreRequest: CreateVectorStoreRequest) -> RequestBuilder<VectorStoreObject> {
        let localVariablePath = "/vector_stores"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createVectorStoreRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VectorStoreObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
     
     - parameter vectorStoreId: (path) The ID of the vector store for which to create a File.  
     - parameter createVectorStoreFileRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createVectorStoreFile(vectorStoreId: String, createVectorStoreFileRequest: CreateVectorStoreFileRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VectorStoreFileObject?, _ error: Error?) -> Void)) -> RequestTask {
        return createVectorStoreFileWithRequestBuilder(vectorStoreId: vectorStoreId, createVectorStoreFileRequest: createVectorStoreFileRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
     - POST /vector_stores/{vector_store_id}/files
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter vectorStoreId: (path) The ID of the vector store for which to create a File.  
     - parameter createVectorStoreFileRequest: (body)  
     - returns: RequestBuilder<VectorStoreFileObject> 
     */
    open class func createVectorStoreFileWithRequestBuilder(vectorStoreId: String, createVectorStoreFileRequest: CreateVectorStoreFileRequest) -> RequestBuilder<VectorStoreFileObject> {
        var localVariablePath = "/vector_stores/{vector_store_id}/files"
        let vectorStoreIdPreEscape = "\(APIHelper.mapValueToPathItem(vectorStoreId))"
        let vectorStoreIdPostEscape = vectorStoreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vector_store_id}", with: vectorStoreIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createVectorStoreFileRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VectorStoreFileObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a vector store file batch.
     
     - parameter vectorStoreId: (path) The ID of the vector store for which to create a File Batch.  
     - parameter createVectorStoreFileBatchRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createVectorStoreFileBatch(vectorStoreId: String, createVectorStoreFileBatchRequest: CreateVectorStoreFileBatchRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VectorStoreFileBatchObject?, _ error: Error?) -> Void)) -> RequestTask {
        return createVectorStoreFileBatchWithRequestBuilder(vectorStoreId: vectorStoreId, createVectorStoreFileBatchRequest: createVectorStoreFileBatchRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a vector store file batch.
     - POST /vector_stores/{vector_store_id}/file_batches
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter vectorStoreId: (path) The ID of the vector store for which to create a File Batch.  
     - parameter createVectorStoreFileBatchRequest: (body)  
     - returns: RequestBuilder<VectorStoreFileBatchObject> 
     */
    open class func createVectorStoreFileBatchWithRequestBuilder(vectorStoreId: String, createVectorStoreFileBatchRequest: CreateVectorStoreFileBatchRequest) -> RequestBuilder<VectorStoreFileBatchObject> {
        var localVariablePath = "/vector_stores/{vector_store_id}/file_batches"
        let vectorStoreIdPreEscape = "\(APIHelper.mapValueToPathItem(vectorStoreId))"
        let vectorStoreIdPostEscape = vectorStoreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vector_store_id}", with: vectorStoreIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createVectorStoreFileBatchRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VectorStoreFileBatchObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete a vector store.
     
     - parameter vectorStoreId: (path) The ID of the vector store to delete. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteVectorStore(vectorStoreId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DeleteVectorStoreResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteVectorStoreWithRequestBuilder(vectorStoreId: vectorStoreId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a vector store.
     - DELETE /vector_stores/{vector_store_id}
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter vectorStoreId: (path) The ID of the vector store to delete. 
     - returns: RequestBuilder<DeleteVectorStoreResponse> 
     */
    open class func deleteVectorStoreWithRequestBuilder(vectorStoreId: String) -> RequestBuilder<DeleteVectorStoreResponse> {
        var localVariablePath = "/vector_stores/{vector_store_id}"
        let vectorStoreIdPreEscape = "\(APIHelper.mapValueToPathItem(vectorStoreId))"
        let vectorStoreIdPostEscape = vectorStoreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vector_store_id}", with: vectorStoreIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeleteVectorStoreResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
     
     - parameter vectorStoreId: (path) The ID of the vector store that the file belongs to. 
     - parameter fileId: (path) The ID of the file to delete. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteVectorStoreFile(vectorStoreId: String, fileId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DeleteVectorStoreFileResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteVectorStoreFileWithRequestBuilder(vectorStoreId: vectorStoreId, fileId: fileId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
     - DELETE /vector_stores/{vector_store_id}/files/{file_id}
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter vectorStoreId: (path) The ID of the vector store that the file belongs to. 
     - parameter fileId: (path) The ID of the file to delete. 
     - returns: RequestBuilder<DeleteVectorStoreFileResponse> 
     */
    open class func deleteVectorStoreFileWithRequestBuilder(vectorStoreId: String, fileId: String) -> RequestBuilder<DeleteVectorStoreFileResponse> {
        var localVariablePath = "/vector_stores/{vector_store_id}/files/{file_id}"
        let vectorStoreIdPreEscape = "\(APIHelper.mapValueToPathItem(vectorStoreId))"
        let vectorStoreIdPostEscape = vectorStoreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vector_store_id}", with: vectorStoreIdPostEscape, options: .literal, range: nil)
        let fileIdPreEscape = "\(APIHelper.mapValueToPathItem(fileId))"
        let fileIdPostEscape = fileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{file_id}", with: fileIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeleteVectorStoreFileResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieves a vector store.
     
     - parameter vectorStoreId: (path) The ID of the vector store to retrieve. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getVectorStore(vectorStoreId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VectorStoreObject?, _ error: Error?) -> Void)) -> RequestTask {
        return getVectorStoreWithRequestBuilder(vectorStoreId: vectorStoreId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves a vector store.
     - GET /vector_stores/{vector_store_id}
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter vectorStoreId: (path) The ID of the vector store to retrieve. 
     - returns: RequestBuilder<VectorStoreObject> 
     */
    open class func getVectorStoreWithRequestBuilder(vectorStoreId: String) -> RequestBuilder<VectorStoreObject> {
        var localVariablePath = "/vector_stores/{vector_store_id}"
        let vectorStoreIdPreEscape = "\(APIHelper.mapValueToPathItem(vectorStoreId))"
        let vectorStoreIdPostEscape = vectorStoreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vector_store_id}", with: vectorStoreIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VectorStoreObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieves a vector store file.
     
     - parameter vectorStoreId: (path) The ID of the vector store that the file belongs to. 
     - parameter fileId: (path) The ID of the file being retrieved. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getVectorStoreFile(vectorStoreId: String, fileId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VectorStoreFileObject?, _ error: Error?) -> Void)) -> RequestTask {
        return getVectorStoreFileWithRequestBuilder(vectorStoreId: vectorStoreId, fileId: fileId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves a vector store file.
     - GET /vector_stores/{vector_store_id}/files/{file_id}
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter vectorStoreId: (path) The ID of the vector store that the file belongs to. 
     - parameter fileId: (path) The ID of the file being retrieved. 
     - returns: RequestBuilder<VectorStoreFileObject> 
     */
    open class func getVectorStoreFileWithRequestBuilder(vectorStoreId: String, fileId: String) -> RequestBuilder<VectorStoreFileObject> {
        var localVariablePath = "/vector_stores/{vector_store_id}/files/{file_id}"
        let vectorStoreIdPreEscape = "\(APIHelper.mapValueToPathItem(vectorStoreId))"
        let vectorStoreIdPostEscape = vectorStoreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vector_store_id}", with: vectorStoreIdPostEscape, options: .literal, range: nil)
        let fileIdPreEscape = "\(APIHelper.mapValueToPathItem(fileId))"
        let fileIdPostEscape = fileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{file_id}", with: fileIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VectorStoreFileObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieves a vector store file batch.
     
     - parameter vectorStoreId: (path) The ID of the vector store that the file batch belongs to. 
     - parameter batchId: (path) The ID of the file batch being retrieved. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getVectorStoreFileBatch(vectorStoreId: String, batchId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VectorStoreFileBatchObject?, _ error: Error?) -> Void)) -> RequestTask {
        return getVectorStoreFileBatchWithRequestBuilder(vectorStoreId: vectorStoreId, batchId: batchId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves a vector store file batch.
     - GET /vector_stores/{vector_store_id}/file_batches/{batch_id}
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter vectorStoreId: (path) The ID of the vector store that the file batch belongs to. 
     - parameter batchId: (path) The ID of the file batch being retrieved. 
     - returns: RequestBuilder<VectorStoreFileBatchObject> 
     */
    open class func getVectorStoreFileBatchWithRequestBuilder(vectorStoreId: String, batchId: String) -> RequestBuilder<VectorStoreFileBatchObject> {
        var localVariablePath = "/vector_stores/{vector_store_id}/file_batches/{batch_id}"
        let vectorStoreIdPreEscape = "\(APIHelper.mapValueToPathItem(vectorStoreId))"
        let vectorStoreIdPostEscape = vectorStoreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vector_store_id}", with: vectorStoreIdPostEscape, options: .literal, range: nil)
        let batchIdPreEscape = "\(APIHelper.mapValueToPathItem(batchId))"
        let batchIdPostEscape = batchIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{batch_id}", with: batchIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VectorStoreFileBatchObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter order
     */
    public enum Order_listFilesInVectorStoreBatch: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_listFilesInVectorStoreBatch: String, CaseIterable {
        case inProgress = "in_progress"
        case completed = "completed"
        case failed = "failed"
        case cancelled = "cancelled"
    }

    /**
     Returns a list of vector store files in a batch.
     
     - parameter vectorStoreId: (path) The ID of the vector store that the files belong to. 
     - parameter batchId: (path) The ID of the file batch that the files belong to. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - parameter filter: (query) Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listFilesInVectorStoreBatch(vectorStoreId: String, batchId: String, limit: Int? = nil, order: Order_listFilesInVectorStoreBatch? = nil, after: String? = nil, before: String? = nil, filter: Filter_listFilesInVectorStoreBatch? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ListVectorStoreFilesResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return listFilesInVectorStoreBatchWithRequestBuilder(vectorStoreId: vectorStoreId, batchId: batchId, limit: limit, order: order, after: after, before: before, filter: filter).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Returns a list of vector store files in a batch.
     - GET /vector_stores/{vector_store_id}/file_batches/{batch_id}/files
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter vectorStoreId: (path) The ID of the vector store that the files belong to. 
     - parameter batchId: (path) The ID of the file batch that the files belong to. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - parameter filter: (query) Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     - returns: RequestBuilder<ListVectorStoreFilesResponse> 
     */
    open class func listFilesInVectorStoreBatchWithRequestBuilder(vectorStoreId: String, batchId: String, limit: Int? = nil, order: Order_listFilesInVectorStoreBatch? = nil, after: String? = nil, before: String? = nil, filter: Filter_listFilesInVectorStoreBatch? = nil) -> RequestBuilder<ListVectorStoreFilesResponse> {
        var localVariablePath = "/vector_stores/{vector_store_id}/file_batches/{batch_id}/files"
        let vectorStoreIdPreEscape = "\(APIHelper.mapValueToPathItem(vectorStoreId))"
        let vectorStoreIdPostEscape = vectorStoreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vector_store_id}", with: vectorStoreIdPostEscape, options: .literal, range: nil)
        let batchIdPreEscape = "\(APIHelper.mapValueToPathItem(batchId))"
        let batchIdPostEscape = batchIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{batch_id}", with: batchIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
            "after": (wrappedValue: after?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
            "filter": (wrappedValue: filter?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListVectorStoreFilesResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter order
     */
    public enum Order_listVectorStoreFiles: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_listVectorStoreFiles: String, CaseIterable {
        case inProgress = "in_progress"
        case completed = "completed"
        case failed = "failed"
        case cancelled = "cancelled"
    }

    /**
     Returns a list of vector store files.
     
     - parameter vectorStoreId: (path) The ID of the vector store that the files belong to. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - parameter filter: (query) Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listVectorStoreFiles(vectorStoreId: String, limit: Int? = nil, order: Order_listVectorStoreFiles? = nil, after: String? = nil, before: String? = nil, filter: Filter_listVectorStoreFiles? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ListVectorStoreFilesResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return listVectorStoreFilesWithRequestBuilder(vectorStoreId: vectorStoreId, limit: limit, order: order, after: after, before: before, filter: filter).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Returns a list of vector store files.
     - GET /vector_stores/{vector_store_id}/files
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter vectorStoreId: (path) The ID of the vector store that the files belong to. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - parameter filter: (query) Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     - returns: RequestBuilder<ListVectorStoreFilesResponse> 
     */
    open class func listVectorStoreFilesWithRequestBuilder(vectorStoreId: String, limit: Int? = nil, order: Order_listVectorStoreFiles? = nil, after: String? = nil, before: String? = nil, filter: Filter_listVectorStoreFiles? = nil) -> RequestBuilder<ListVectorStoreFilesResponse> {
        var localVariablePath = "/vector_stores/{vector_store_id}/files"
        let vectorStoreIdPreEscape = "\(APIHelper.mapValueToPathItem(vectorStoreId))"
        let vectorStoreIdPostEscape = vectorStoreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vector_store_id}", with: vectorStoreIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
            "after": (wrappedValue: after?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
            "filter": (wrappedValue: filter?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListVectorStoreFilesResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter order
     */
    public enum Order_listVectorStores: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     Returns a list of vector stores.
     
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listVectorStores(limit: Int? = nil, order: Order_listVectorStores? = nil, after: String? = nil, before: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ListVectorStoresResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return listVectorStoresWithRequestBuilder(limit: limit, order: order, after: after, before: before).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Returns a list of vector stores.
     - GET /vector_stores
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - returns: RequestBuilder<ListVectorStoresResponse> 
     */
    open class func listVectorStoresWithRequestBuilder(limit: Int? = nil, order: Order_listVectorStores? = nil, after: String? = nil, before: String? = nil) -> RequestBuilder<ListVectorStoresResponse> {
        let localVariablePath = "/vector_stores"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
            "after": (wrappedValue: after?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListVectorStoresResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Modifies a vector store.
     
     - parameter vectorStoreId: (path) The ID of the vector store to modify. 
     - parameter updateVectorStoreRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func modifyVectorStore(vectorStoreId: String, updateVectorStoreRequest: UpdateVectorStoreRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VectorStoreObject?, _ error: Error?) -> Void)) -> RequestTask {
        return modifyVectorStoreWithRequestBuilder(vectorStoreId: vectorStoreId, updateVectorStoreRequest: updateVectorStoreRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Modifies a vector store.
     - POST /vector_stores/{vector_store_id}
     - Bearer Token:
       - type: http
       - name: ApiKeyAuth
     - parameter vectorStoreId: (path) The ID of the vector store to modify. 
     - parameter updateVectorStoreRequest: (body)  
     - returns: RequestBuilder<VectorStoreObject> 
     */
    open class func modifyVectorStoreWithRequestBuilder(vectorStoreId: String, updateVectorStoreRequest: UpdateVectorStoreRequest) -> RequestBuilder<VectorStoreObject> {
        var localVariablePath = "/vector_stores/{vector_store_id}"
        let vectorStoreIdPreEscape = "\(APIHelper.mapValueToPathItem(vectorStoreId))"
        let vectorStoreIdPostEscape = vectorStoreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vector_store_id}", with: vectorStoreIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateVectorStoreRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VectorStoreObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
