//
// StaticChunkingStrategyStatic.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct StaticChunkingStrategyStatic: Codable, JSONEncodable, Hashable {

    static let maxChunkSizeTokensRule = NumericRule<Int>(minimum: 100, exclusiveMinimum: false, maximum: 4096, exclusiveMaximum: false, multipleOf: nil)
    /** The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`. */
    public var maxChunkSizeTokens: Int
    /** The number of tokens that overlap between chunks. The default value is `400`.  Note that the overlap must not exceed half of `max_chunk_size_tokens`.  */
    public var chunkOverlapTokens: Int

    public init(maxChunkSizeTokens: Int, chunkOverlapTokens: Int) {
        self.maxChunkSizeTokens = maxChunkSizeTokens
        self.chunkOverlapTokens = chunkOverlapTokens
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case maxChunkSizeTokens = "max_chunk_size_tokens"
        case chunkOverlapTokens = "chunk_overlap_tokens"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(maxChunkSizeTokens, forKey: .maxChunkSizeTokens)
        try container.encode(chunkOverlapTokens, forKey: .chunkOverlapTokens)
    }
}

