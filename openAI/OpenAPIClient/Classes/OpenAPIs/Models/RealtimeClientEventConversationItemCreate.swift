//
// RealtimeClientEventConversationItemCreate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Add a new Item to the Conversation&#39;s context, including messages, function calls, and function call responses. This event can be used both to populate a \&quot;history\&quot; of the conversation and to add new items mid-stream, but has the current limitation that it cannot populate assistant audio messages. If successful, the server will respond with a &#x60;conversation.item.created&#x60; event, otherwise an &#x60;error&#x60; event will be sent. */
public struct RealtimeClientEventConversationItemCreate: Codable, JSONEncodable, Hashable {

    /** Optional client-generated ID used to identify this event. */
    public var eventId: String?
    /** The event type, must be `conversation.item.create`. */
    public var type: String
    /** The ID of the preceding item after which the new item will be inserted. If not set, the new item will be appended to the end of the conversation. If set, it allows an item to be inserted mid-conversation. If the ID cannot be found, an error will be returned and the item will not be added. */
    public var previousItemId: String?
    public var item: RealtimeConversationItem

    public init(eventId: String? = nil, type: String, previousItemId: String? = nil, item: RealtimeConversationItem) {
        self.eventId = eventId
        self.type = type
        self.previousItemId = previousItemId
        self.item = item
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eventId = "event_id"
        case type
        case previousItemId = "previous_item_id"
        case item
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(eventId, forKey: .eventId)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(previousItemId, forKey: .previousItemId)
        try container.encode(item, forKey: .item)
    }
}

