//
// RealtimeServerEventInputAudioBufferSpeechStopped.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Returned in &#x60;server_vad&#x60; mode when the server detects the end of speech in the audio buffer. The server will also send an &#x60;conversation.item.created&#x60; event with the user message item that is created from the audio buffer. */
public struct RealtimeServerEventInputAudioBufferSpeechStopped: Codable, JSONEncodable, Hashable {

    /** The unique ID of the server event. */
    public var eventId: String
    /** The event type, must be `input_audio_buffer.speech_stopped`. */
    public var type: String
    /** Milliseconds since the session started when speech stopped. This will correspond to the end of audio sent to the model, and thus includes the `min_silence_duration_ms` configured in the Session. */
    public var audioEndMs: Int
    /** The ID of the user message item that will be created. */
    public var itemId: String

    public init(eventId: String, type: String, audioEndMs: Int, itemId: String) {
        self.eventId = eventId
        self.type = type
        self.audioEndMs = audioEndMs
        self.itemId = itemId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eventId = "event_id"
        case type
        case audioEndMs = "audio_end_ms"
        case itemId = "item_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(eventId, forKey: .eventId)
        try container.encode(type, forKey: .type)
        try container.encode(audioEndMs, forKey: .audioEndMs)
        try container.encode(itemId, forKey: .itemId)
    }
}

