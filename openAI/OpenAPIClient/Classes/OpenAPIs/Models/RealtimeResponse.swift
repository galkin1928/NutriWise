//
// RealtimeResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The response resource. */
public struct RealtimeResponse: Codable, JSONEncodable, Hashable {

    /** The unique ID of the response. */
    public var id: String?
    /** The object type, must be `realtime.response`. */
    public var object: String?
    /** The final status of the response (`completed`, `cancelled`, `failed`, `incomplete`). */
    public var status: String?
    public var statusDetails: RealtimeResponseStatusDetails?
    /** The list of output items generated by the response. */
    public var output: [AnyCodable]?
    public var usage: RealtimeResponseUsage?

    public init(id: String? = nil, object: String? = nil, status: String? = nil, statusDetails: RealtimeResponseStatusDetails? = nil, output: [AnyCodable]? = nil, usage: RealtimeResponseUsage? = nil) {
        self.id = id
        self.object = object
        self.status = status
        self.statusDetails = statusDetails
        self.output = output
        self.usage = usage
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case object
        case status
        case statusDetails = "status_details"
        case output
        case usage
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(object, forKey: .object)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(statusDetails, forKey: .statusDetails)
        try container.encodeIfPresent(output, forKey: .output)
        try container.encodeIfPresent(usage, forKey: .usage)
    }
}

