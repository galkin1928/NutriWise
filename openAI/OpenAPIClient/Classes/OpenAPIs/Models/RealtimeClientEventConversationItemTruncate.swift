//
// RealtimeClientEventConversationItemTruncate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Send this event to truncate a previous assistant messageâ€™s audio. The server will produce audio faster than realtime, so this event is useful when the user interrupts to truncate audio that has already been sent to the client but not yet played. This will synchronize the server&#39;s understanding of the audio with the client&#39;s playback. Truncating audio will delete the server-side text transcript to ensure there is not text in the context that hasn&#39;t been heard by the user. If successful, the server will respond with a &#x60;conversation.item.truncated&#x60; event.  */
public struct RealtimeClientEventConversationItemTruncate: Codable, JSONEncodable, Hashable {

    /** Optional client-generated ID used to identify this event. */
    public var eventId: String?
    /** The event type, must be \"conversation.item.truncate\". */
    public var type: String
    /** The ID of the assistant message item to truncate. Only assistant message items can be truncated. */
    public var itemId: String
    /** The index of the content part to truncate. Set this to 0. */
    public var contentIndex: Int
    /** Inclusive duration up to which audio is truncated, in milliseconds. If the audio_end_ms is greater than the actual audio duration, the server will respond with an error. */
    public var audioEndMs: Int

    public init(eventId: String? = nil, type: String, itemId: String, contentIndex: Int, audioEndMs: Int) {
        self.eventId = eventId
        self.type = type
        self.itemId = itemId
        self.contentIndex = contentIndex
        self.audioEndMs = audioEndMs
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eventId = "event_id"
        case type
        case itemId = "item_id"
        case contentIndex = "content_index"
        case audioEndMs = "audio_end_ms"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(eventId, forKey: .eventId)
        try container.encode(type, forKey: .type)
        try container.encode(itemId, forKey: .itemId)
        try container.encode(contentIndex, forKey: .contentIndex)
        try container.encode(audioEndMs, forKey: .audioEndMs)
    }
}

