//
// RealtimeServerEventConversationItemTruncated.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Returned when an earlier assistant audio message item is truncated by the client with a &#x60;conversation.item.truncate&#x60; event. This event is used to synchronize the server&#39;s understanding of the audio with the client&#39;s playback. This action will truncate the audio and remove the server-side text transcript to ensure there is no text in the context that hasn&#39;t been heard by the user. */
public struct RealtimeServerEventConversationItemTruncated: Codable, JSONEncodable, Hashable {

    /** The unique ID of the server event. */
    public var eventId: String
    /** The event type, must be `conversation.item.truncated`. */
    public var type: String
    /** The ID of the assistant message item that was truncated. */
    public var itemId: String
    /** The index of the content part that was truncated. */
    public var contentIndex: Int
    /** The duration up to which the audio was truncated, in milliseconds. */
    public var audioEndMs: Int

    public init(eventId: String, type: String, itemId: String, contentIndex: Int, audioEndMs: Int) {
        self.eventId = eventId
        self.type = type
        self.itemId = itemId
        self.contentIndex = contentIndex
        self.audioEndMs = audioEndMs
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eventId = "event_id"
        case type
        case itemId = "item_id"
        case contentIndex = "content_index"
        case audioEndMs = "audio_end_ms"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(eventId, forKey: .eventId)
        try container.encode(type, forKey: .type)
        try container.encode(itemId, forKey: .itemId)
        try container.encode(contentIndex, forKey: .contentIndex)
        try container.encode(audioEndMs, forKey: .audioEndMs)
    }
}

