//
// RealtimeServerEventConversationItemInputAudioTranscriptionCompleted.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** This event is the output of audio transcription for user audio written to the user audio buffer. Transcription begins when the input audio buffer is committed by the client or server (in &#x60;server_vad&#x60; mode). Transcription runs asynchronously with Response creation, so this event may come before or after the Response events. Realtime API models accept audio natively, and thus input transcription is a separate process run on a separate ASR (Automatic Speech Recognition) model, currently always &#x60;whisper-1&#x60;. Thus the transcript may diverge somewhat from the model&#39;s interpretation, and should be treated as a rough guide. */
public struct RealtimeServerEventConversationItemInputAudioTranscriptionCompleted: Codable, JSONEncodable, Hashable {

    /** The unique ID of the server event. */
    public var eventId: String
    /** The event type, must be `conversation.item.input_audio_transcription.completed`. */
    public var type: String
    /** The ID of the user message item containing the audio. */
    public var itemId: String
    /** The index of the content part containing the audio. */
    public var contentIndex: Int
    /** The transcribed text. */
    public var transcript: String

    public init(eventId: String, type: String, itemId: String, contentIndex: Int, transcript: String) {
        self.eventId = eventId
        self.type = type
        self.itemId = itemId
        self.contentIndex = contentIndex
        self.transcript = transcript
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eventId = "event_id"
        case type
        case itemId = "item_id"
        case contentIndex = "content_index"
        case transcript
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(eventId, forKey: .eventId)
        try container.encode(type, forKey: .type)
        try container.encode(itemId, forKey: .itemId)
        try container.encode(contentIndex, forKey: .contentIndex)
        try container.encode(transcript, forKey: .transcript)
    }
}

