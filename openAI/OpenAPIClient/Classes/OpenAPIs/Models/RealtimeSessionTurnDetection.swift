//
// RealtimeSessionTurnDetection.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Configuration for turn detection. Can be set to &#x60;null&#x60; to turn off. Server  VAD means that the model will detect the start and end of speech based on  audio volume and respond at the end of user speech.  */
public struct RealtimeSessionTurnDetection: Codable, JSONEncodable, Hashable {

    /** Type of turn detection, only `server_vad` is currently supported.  */
    public var type: String?
    /** Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A  higher threshold will require louder audio to activate the model, and  thus might perform better in noisy environments.  */
    public var threshold: Double?
    /** Amount of audio to include before the VAD detected speech (in  milliseconds). Defaults to 300ms.  */
    public var prefixPaddingMs: Int?
    /** Duration of silence to detect speech stop (in milliseconds). Defaults  to 500ms. With shorter values the model will respond more quickly,  but may jump in on short pauses from the user.  */
    public var silenceDurationMs: Int?

    public init(type: String? = nil, threshold: Double? = nil, prefixPaddingMs: Int? = nil, silenceDurationMs: Int? = nil) {
        self.type = type
        self.threshold = threshold
        self.prefixPaddingMs = prefixPaddingMs
        self.silenceDurationMs = silenceDurationMs
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case threshold
        case prefixPaddingMs = "prefix_padding_ms"
        case silenceDurationMs = "silence_duration_ms"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(threshold, forKey: .threshold)
        try container.encodeIfPresent(prefixPaddingMs, forKey: .prefixPaddingMs)
        try container.encodeIfPresent(silenceDurationMs, forKey: .silenceDurationMs)
    }
}

