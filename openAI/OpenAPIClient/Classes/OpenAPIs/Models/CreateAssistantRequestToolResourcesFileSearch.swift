//
// CreateAssistantRequestToolResourcesFileSearch.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateAssistantRequestToolResourcesFileSearch: Codable, JSONEncodable, Hashable {

    static let vectorStoreIdsRule = ArrayRule(minItems: nil, maxItems: 1, uniqueItems: false)
    static let vectorStoresRule = ArrayRule(minItems: nil, maxItems: 1, uniqueItems: false)
    /** The [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.  */
    public var vectorStoreIds: [String]?
    /** A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this assistant. There can be a maximum of 1 vector store attached to the assistant.  */
    public var vectorStores: [CreateAssistantRequestToolResourcesFileSearchVectorStoresInner]?

    public init(vectorStoreIds: [String]? = nil, vectorStores: [CreateAssistantRequestToolResourcesFileSearchVectorStoresInner]? = nil) {
        self.vectorStoreIds = vectorStoreIds
        self.vectorStores = vectorStores
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case vectorStoreIds = "vector_store_ids"
        case vectorStores = "vector_stores"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(vectorStoreIds, forKey: .vectorStoreIds)
        try container.encodeIfPresent(vectorStores, forKey: .vectorStores)
    }
}

