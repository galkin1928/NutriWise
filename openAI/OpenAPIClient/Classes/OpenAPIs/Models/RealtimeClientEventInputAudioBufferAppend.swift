//
// RealtimeClientEventInputAudioBufferAppend.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Send this event to append audio bytes to the input audio buffer. The audio buffer is temporary storage you can write to and later commit. In Server VAD mode, the audio buffer is used to detect speech and the server will decide when to commit. When Server VAD is disabled, you must commit the audio buffer manually. The client may choose how much audio to place in each event up to a maximum of 15 MiB, for example streaming smaller chunks from the client may allow the VAD to be more responsive. Unlike made other client events, the server will not send a confirmation response to this event. */
public struct RealtimeClientEventInputAudioBufferAppend: Codable, JSONEncodable, Hashable {

    /** Optional client-generated ID used to identify this event. */
    public var eventId: String?
    /** The event type, must be \"input_audio_buffer.append\". */
    public var type: String
    /** Base64-encoded audio bytes. This must be in the format specified by the `input_audio_format` field in the session configuration. */
    public var audio: String

    public init(eventId: String? = nil, type: String, audio: String) {
        self.eventId = eventId
        self.type = type
        self.audio = audio
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eventId = "event_id"
        case type
        case audio
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(eventId, forKey: .eventId)
        try container.encode(type, forKey: .type)
        try container.encode(audio, forKey: .audio)
    }
}

