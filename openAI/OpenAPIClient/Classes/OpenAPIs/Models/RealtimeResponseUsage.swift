//
// RealtimeResponseUsage.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Usage statistics for the Response, this will correspond to billing. A Realtime API session will maintain a conversation context and append new Items to the Conversation, thus output from previous turns (text and audio tokens) will become the input for later turns. */
public struct RealtimeResponseUsage: Codable, JSONEncodable, Hashable {

    /** The total number of tokens in the Response including input and output text and audio tokens. */
    public var totalTokens: Int?
    /** The number of input tokens used in the Response, including text and audio tokens. */
    public var inputTokens: Int?
    /** The number of output tokens sent in the Response, including text and audio tokens. */
    public var outputTokens: Int?
    public var inputTokenDetails: RealtimeResponseUsageInputTokenDetails?
    public var outputTokenDetails: RealtimeResponseUsageOutputTokenDetails?

    public init(totalTokens: Int? = nil, inputTokens: Int? = nil, outputTokens: Int? = nil, inputTokenDetails: RealtimeResponseUsageInputTokenDetails? = nil, outputTokenDetails: RealtimeResponseUsageOutputTokenDetails? = nil) {
        self.totalTokens = totalTokens
        self.inputTokens = inputTokens
        self.outputTokens = outputTokens
        self.inputTokenDetails = inputTokenDetails
        self.outputTokenDetails = outputTokenDetails
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case totalTokens = "total_tokens"
        case inputTokens = "input_tokens"
        case outputTokens = "output_tokens"
        case inputTokenDetails = "input_token_details"
        case outputTokenDetails = "output_token_details"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(totalTokens, forKey: .totalTokens)
        try container.encodeIfPresent(inputTokens, forKey: .inputTokens)
        try container.encodeIfPresent(outputTokens, forKey: .outputTokens)
        try container.encodeIfPresent(inputTokenDetails, forKey: .inputTokenDetails)
        try container.encodeIfPresent(outputTokenDetails, forKey: .outputTokenDetails)
    }
}

