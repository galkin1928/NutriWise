//
// RealtimeSession.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Realtime session object configuration. */
public struct RealtimeSession: Codable, JSONEncodable, Hashable {

    public enum Voice: String, Codable, CaseIterable {
        case alloy = "alloy"
        case ash = "ash"
        case ballad = "ballad"
        case coral = "coral"
        case echo = "echo"
        case sage = "sage"
        case shimmer = "shimmer"
        case verse = "verse"
    }
    /** The set of modalities the model can respond with. To disable audio, set this to [\"text\"].  */
    public var modalities: [String]?
    /** The default system instructions (i.e. system message) prepended to model  calls. This field allows the client to guide the model on desired  responses. The model can be instructed on response content and format,  (e.g. \"be extremely succinct\", \"act friendly\", \"here are examples of good  responses\") and on audio behavior (e.g. \"talk quickly\", \"inject emotion  into your voice\", \"laugh frequently\"). The instructions are not guaranteed  to be followed by the model, but they provide guidance to the model on the  desired behavior.  Note that the server sets default instructions which will be used if this  field is not set and are visible in the `session.created` event at the  start of the session.  */
    public var instructions: String?
    /** The voice the model uses to respond. Supported voices are `alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`, `shimmer`, and `verse`. Cannot be  changed once the model has responded with audio at least once.  */
    public var voice: Voice?
    /** The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.  */
    public var inputAudioFormat: String?
    /** The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.  */
    public var outputAudioFormat: String?
    public var inputAudioTranscription: RealtimeSessionInputAudioTranscription?
    public var turnDetection: RealtimeSessionTurnDetection?
    /** Tools (functions) available to the model. */
    public var tools: [RealtimeSessionToolsInner]?
    /** How the model chooses tools. Options are `auto`, `none`, `required`, or  specify a function.  */
    public var toolChoice: String?
    /** Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.  */
    public var temperature: Double?
    public var maxResponseOutputTokens: RealtimeSessionMaxResponseOutputTokens?

    public init(modalities: [String]? = nil, instructions: String? = nil, voice: Voice? = nil, inputAudioFormat: String? = nil, outputAudioFormat: String? = nil, inputAudioTranscription: RealtimeSessionInputAudioTranscription? = nil, turnDetection: RealtimeSessionTurnDetection? = nil, tools: [RealtimeSessionToolsInner]? = nil, toolChoice: String? = nil, temperature: Double? = nil, maxResponseOutputTokens: RealtimeSessionMaxResponseOutputTokens? = nil) {
        self.modalities = modalities
        self.instructions = instructions
        self.voice = voice
        self.inputAudioFormat = inputAudioFormat
        self.outputAudioFormat = outputAudioFormat
        self.inputAudioTranscription = inputAudioTranscription
        self.turnDetection = turnDetection
        self.tools = tools
        self.toolChoice = toolChoice
        self.temperature = temperature
        self.maxResponseOutputTokens = maxResponseOutputTokens
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case modalities
        case instructions
        case voice
        case inputAudioFormat = "input_audio_format"
        case outputAudioFormat = "output_audio_format"
        case inputAudioTranscription = "input_audio_transcription"
        case turnDetection = "turn_detection"
        case tools
        case toolChoice = "tool_choice"
        case temperature
        case maxResponseOutputTokens = "max_response_output_tokens"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(modalities, forKey: .modalities)
        try container.encodeIfPresent(instructions, forKey: .instructions)
        try container.encodeIfPresent(voice, forKey: .voice)
        try container.encodeIfPresent(inputAudioFormat, forKey: .inputAudioFormat)
        try container.encodeIfPresent(outputAudioFormat, forKey: .outputAudioFormat)
        try container.encodeIfPresent(inputAudioTranscription, forKey: .inputAudioTranscription)
        try container.encodeIfPresent(turnDetection, forKey: .turnDetection)
        try container.encodeIfPresent(tools, forKey: .tools)
        try container.encodeIfPresent(toolChoice, forKey: .toolChoice)
        try container.encodeIfPresent(temperature, forKey: .temperature)
        try container.encodeIfPresent(maxResponseOutputTokens, forKey: .maxResponseOutputTokens)
    }
}

