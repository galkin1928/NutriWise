//
// RealtimeServerEventInputAudioBufferCommitted.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Returned when an input audio buffer is committed, either by the client or automatically in server VAD mode. The &#x60;item_id&#x60; property is the ID of the user message item that will be created, thus a &#x60;conversation.item.created&#x60; event will also be sent to the client. */
public struct RealtimeServerEventInputAudioBufferCommitted: Codable, JSONEncodable, Hashable {

    /** The unique ID of the server event. */
    public var eventId: String
    /** The event type, must be `input_audio_buffer.committed`. */
    public var type: String
    /** The ID of the preceding item after which the new item will be inserted. */
    public var previousItemId: String
    /** The ID of the user message item that will be created. */
    public var itemId: String

    public init(eventId: String, type: String, previousItemId: String, itemId: String) {
        self.eventId = eventId
        self.type = type
        self.previousItemId = previousItemId
        self.itemId = itemId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eventId = "event_id"
        case type
        case previousItemId = "previous_item_id"
        case itemId = "item_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(eventId, forKey: .eventId)
        try container.encode(type, forKey: .type)
        try container.encode(previousItemId, forKey: .previousItemId)
        try container.encode(itemId, forKey: .itemId)
    }
}

