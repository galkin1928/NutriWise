//
// CompletionUsageCompletionTokensDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Breakdown of tokens used in a completion. */
public struct CompletionUsageCompletionTokensDetails: Codable, JSONEncodable, Hashable {

    /** When using Predicted Outputs, the number of tokens in the prediction that appeared in the completion.  */
    public var acceptedPredictionTokens: Int?
    /** Audio input tokens generated by the model. */
    public var audioTokens: Int?
    /** Tokens generated by the model for reasoning. */
    public var reasoningTokens: Int?
    /** When using Predicted Outputs, the number of tokens in the prediction that did not appear in the completion. However, like reasoning tokens, these tokens are still counted in the total completion tokens for purposes of billing, output, and context window limits.  */
    public var rejectedPredictionTokens: Int?

    public init(acceptedPredictionTokens: Int? = nil, audioTokens: Int? = nil, reasoningTokens: Int? = nil, rejectedPredictionTokens: Int? = nil) {
        self.acceptedPredictionTokens = acceptedPredictionTokens
        self.audioTokens = audioTokens
        self.reasoningTokens = reasoningTokens
        self.rejectedPredictionTokens = rejectedPredictionTokens
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case acceptedPredictionTokens = "accepted_prediction_tokens"
        case audioTokens = "audio_tokens"
        case reasoningTokens = "reasoning_tokens"
        case rejectedPredictionTokens = "rejected_prediction_tokens"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(acceptedPredictionTokens, forKey: .acceptedPredictionTokens)
        try container.encodeIfPresent(audioTokens, forKey: .audioTokens)
        try container.encodeIfPresent(reasoningTokens, forKey: .reasoningTokens)
        try container.encodeIfPresent(rejectedPredictionTokens, forKey: .rejectedPredictionTokens)
    }
}

